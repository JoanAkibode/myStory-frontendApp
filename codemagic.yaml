workflows:
  react-native-ios:
    name: React Native iOS
    max_build_duration: 120
    instance_type: mac_mini_m2

    integrations:
      app_store_connect: Codemagic_API_Key  # Apple API key set in Codemagic UI

    environment:
      ios_signing:
        distribution_type: development    # ‚úÖ For TestFlight
        bundle_identifier: com.joanakibode.storycal
      vars:
        XCODE_WORKSPACE: "StoryCal.xcworkspace"
        XCODE_SCHEME: "StoryCal"
        APP_ID: 6742653857  # From App Store Connect
        EXPO_TOKEN: $EXPO_TOKEN  # Optional, for future EAS-related features
        NODE_VERSION: 18.19.0
        RUBY_VERSION: 3.2.2
      node: 18.19.0
      xcode: latest
      cocoapods: default

    scripts:
      - name: Remove conflicting lockfile
        script: |
          echo "üîç Checking for package-lock.json..."
          ls -la package-lock.json || true
          echo "üóëÔ∏è Removing package-lock.json if it exists..."
          rm -f package-lock.json
          echo "‚úÖ Done removing package-lock.json"

      - name: Install dependencies, Expo CLI and eject app
        script: |
          echo "üì¶ Starting dependency installation..."
          echo "Current directory: $(pwd)"
          echo "Node version: $(node -v)"
          echo "Yarn version: $(yarn -v)"
          
          echo "üîÑ Installing dependencies..."
          yarn install
          
          echo "üì± Installing Expo CLI..."
          yarn global add expo-cli
          
          echo "üèóÔ∏è Running Expo prebuild..."
          expo prebuild --platform ios
          
          echo "‚úÖ Prebuild completed"
          echo "Checking generated files:"
          ls -la ios/

      - name: Set Info.plist values
        script: |
          echo "üìù Setting up Info.plist..."
          PLIST=$CM_BUILD_DIR/ios/StoryCal/Info.plist
          PLIST_BUDDY=/usr/libexec/PlistBuddy
          
          echo "Current Info.plist location: $PLIST"
          echo "Info.plist exists: $(test -f "$PLIST" && echo "Yes" || echo "No")"
          
          echo "üîç Checking current ITSAppUsesNonExemptEncryption value..."
          if ! $PLIST_BUDDY -c "Print :ITSAppUsesNonExemptEncryption" "$PLIST" > /dev/null 2>&1; then
            echo "‚ûï Adding ITSAppUsesNonExemptEncryption..."
            $PLIST_BUDDY -c "Add :ITSAppUsesNonExemptEncryption bool false" "$PLIST"
            echo "‚úÖ Added successfully"
          else
            echo "‚ÑπÔ∏è ITSAppUsesNonExemptEncryption already exists"
          fi

      - name: Install CocoaPods dependencies
        script: |
          echo "üì± Installing CocoaPods dependencies..."
          echo "Current directory: $(pwd)"
          echo "Moving to ios directory..."
          cd ios
          echo "Podfile exists: $(test -f "Podfile" && echo "Yes" || echo "No")"
          
          echo "üîç Checking CocoaPods version..."
          pod --version
          
          echo "üîÑ Running pod install..."
          pod install --verbose --repo-update
          
          echo "‚úÖ Pod installation completed"
          echo "Checking generated files:"
          ls -la Pods/

      - name: Set up automatic signing
        script: |
          echo "üîê Setting up code signing..."
          
          echo "üìã Checking available certificates..."
          security find-identity -v -p codesigning
          
          echo "üìã Checking available provisioning profiles..."
          echo "Provisioning profiles directory:"
          ls -la ~/Library/MobileDevice/Provisioning\ Profiles/
          
          echo "üîç Checking keychain status..."
          security list-keychains
          
          echo "‚öôÔ∏è Configuring code signing..."
          xcode-project use-profiles --warn-only
          
          echo "‚úÖ Code signing setup completed"

      - name: Create exportOptions.plist
        script: |
          echo "üìù Creating exportOptions.plist..."
          echo "Current directory: $(pwd)"
          
          cat > ios/exportOptions.plist <<EOF
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
              <key>method</key>
              <string>development</string>
              <key>teamID</key>
              <string>286X5G8B98</string>
              <key>uploadBitcode</key>
              <false/>
              <key>uploadSymbols</key>
              <true/>
              <key>provisioningProfiles</key>
              <dict>
                  <key>com.joanakibode.storycal</key>
                  <string>SoryCal profile V2</string>
              </dict>
          </dict>
          </plist>
          EOF
          
          echo "‚úÖ exportOptions.plist created"
          echo "Checking file contents:"
          cat ios/exportOptions.plist

      - name: Build ipa for distribution
        script: |
          echo "üèóÔ∏è Starting build process..."
          
          # Set up build directories
          BUILD_DIR="$CM_BUILD_DIR/build"
          ARCHIVE_PATH="$BUILD_DIR/StoryCal.xcarchive"
          IPA_PATH="$BUILD_DIR/ios/ipa"
          
          echo "üìÅ Setting up build directories..."
          echo "Build directory: $BUILD_DIR"
          echo "Archive path: $ARCHIVE_PATH"
          echo "IPA path: $IPA_PATH"
          
          # Create necessary directories
          echo "üìÇ Creating directories..."
          mkdir -p "$BUILD_DIR"
          mkdir -p "$IPA_PATH"
          
          echo "Current directory: $(pwd)"
          echo "Moving to ios directory..."
          cd $CM_BUILD_DIR/ios
          
          echo "üßπ Cleaning previous builds..."
          xcodebuild clean -workspace "$XCODE_WORKSPACE" -scheme "$XCODE_SCHEME"
          
          echo "üì¶ Starting archive process..."
          echo "Workspace: $XCODE_WORKSPACE"
          echo "Scheme: $XCODE_SCHEME"
          echo "Archive path: $ARCHIVE_PATH"
          
          xcodebuild archive \
            -workspace "$XCODE_WORKSPACE" \
            -scheme "$XCODE_SCHEME" \
            -archivePath "$ARCHIVE_PATH" \
            CODE_SIGN_STYLE=Manual \
            DEVELOPMENT_TEAM=286X5G8B98 \
            COMPILER_INDEX_STORE_ENABLE=NO \
            -destination "generic/platform=iOS" \
            SKIP_INSTALL=NO \
            BUILD_LIBRARY_FOR_DISTRIBUTION=YES \
            ENABLE_BITCODE=NO \
            ONLY_ACTIVE_ARCH=NO \
            VALIDATE_WORKSPACE=YES \
            CODE_SIGN_IDENTITY="iPhone Developer" \
            CODE_SIGNING_REQUIRED=YES \
            CODE_SIGNING_ALLOWED=YES \
            PROVISIONING_PROFILE_SPECIFIER="SoryCal profile V2" \
            | xcpretty
          
          echo "üîç Checking archive creation..."
          if [ ! -d "$ARCHIVE_PATH" ]; then
            echo "‚ùå Error: Archive was not created at $ARCHIVE_PATH"
            echo "üìã Checking build logs for more details..."
            cat /tmp/xcodebuild_logs/*.log
            echo "üìÅ Checking build directory contents:"
            ls -la "$BUILD_DIR"
            exit 1
          fi
          
          echo "‚úÖ Archive created successfully at $ARCHIVE_PATH"
          echo "üìÅ Archive contents:"
          ls -la "$ARCHIVE_PATH"
          
          echo "üì¶ Starting export process..."
          echo "Archive path: $ARCHIVE_PATH"
          echo "Export path: $IPA_PATH"
          echo "Export options plist exists: $(test -f "exportOptions.plist" && echo "Yes" || echo "No")"
          
          xcodebuild -exportArchive \
            -archivePath "$ARCHIVE_PATH" \
            -exportOptionsPlist exportOptions.plist \
            -exportPath "$IPA_PATH" \
            | xcpretty
          
          echo "üîç Checking IPA creation..."
          if [ ! -d "$IPA_PATH" ] || [ ! -f "$IPA_PATH"/*.ipa ]; then
            echo "‚ùå Error: IPA was not created in $IPA_PATH"
            echo "üìã Checking build logs for more details..."
            cat /tmp/xcodebuild_logs/*.log
            echo "üìÅ Checking export directory contents:"
            ls -la "$IPA_PATH"
            exit 1
          fi
          
          echo "‚úÖ Build completed successfully"
          echo "üìÅ Final IPA location:"
          ls -la "$IPA_PATH"
              
    artifacts:
      - build/ios/ipa/*.ipa
      - /tmp/xcodebuild_logs/*.log
      - $HOME/Library/Developer/Xcode/DerivedData/**/Build/**/*.app
      - $HOME/Library/Developer/Xcode/DerivedData/**/Build/**/*.dSYM

    publishing:
      email:
        recipients:
          - jakibode@outlook.fr
        notify:
          success: true
          failure: true
